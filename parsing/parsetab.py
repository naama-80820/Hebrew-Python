
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW BANG BANG_EQUAL BREAK COLON COMMA CONTINUE DEF DOT ELSE EQUAL EQUAL_EQUAL FOR GREATER GREATER_EQUAL IDENTIFIER IF LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL MINUS NUMBER PLUS PRINT QUESTION RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING WHILEstatement : expression_statement\n                 | print_statement\n                 | variable_declaration\n                 | function_declarationvariable_declaration : IDENTIFIER EQUAL expression SEMICOLONfunction_declaration : DEF IDENTIFIER LEFT_PAREN RIGHT_PAREN COLON statement_list\n                             | DEF IDENTIFIER LEFT_PAREN parameter_list RIGHT_PAREN COLON statement_liststatement_list : statement\n                     | statement_list SEMICOLON statementexpression_statement : expression SEMICOLONexpression : IDENTIFIER\n                  | NUMBER\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression STAR expression\n                  | expression SLASH expressionparameter_list : IDENTIFIER COMMA parameter_listparameter_list : IDENTIFIERprint_statement : PRINT expression SEMICOLON'
    
_lr_action_items = {'PRINT':([0,32,37,38,],[7,7,7,7,]),'IDENTIFIER':([0,7,9,12,13,14,15,18,26,31,32,37,38,],[8,17,19,17,17,17,17,17,28,28,8,8,8,]),'DEF':([0,32,37,38,],[9,9,9,9,]),'NUMBER':([0,7,12,13,14,15,18,32,37,38,],[10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,3,4,5,11,24,27,35,36,39,40,],[0,-1,-2,-3,-4,-10,-19,-5,-6,-8,-7,-9,]),'SEMICOLON':([2,3,4,5,6,8,10,11,16,17,20,21,22,23,24,25,27,35,36,39,40,],[-1,-2,-3,-4,11,-11,-12,-10,24,-11,-13,-14,-15,-16,-19,27,-5,38,-8,38,-9,]),'PLUS':([6,8,10,16,17,20,21,22,23,25,],[12,-11,-12,12,-11,12,12,12,12,12,]),'MINUS':([6,8,10,16,17,20,21,22,23,25,],[13,-11,-12,13,-11,13,13,13,13,13,]),'STAR':([6,8,10,16,17,20,21,22,23,25,],[14,-11,-12,14,-11,14,14,14,14,14,]),'SLASH':([6,8,10,16,17,20,21,22,23,25,],[15,-11,-12,15,-11,15,15,15,15,15,]),'EQUAL':([8,],[18,]),'LEFT_PAREN':([19,],[26,]),'RIGHT_PAREN':([26,28,30,34,],[29,-18,33,-17,]),'COMMA':([28,],[31,]),'COLON':([29,33,],[32,37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,32,37,38,],[1,36,36,40,]),'expression_statement':([0,32,37,38,],[2,2,2,2,]),'print_statement':([0,32,37,38,],[3,3,3,3,]),'variable_declaration':([0,32,37,38,],[4,4,4,4,]),'function_declaration':([0,32,37,38,],[5,5,5,5,]),'expression':([0,7,12,13,14,15,18,32,37,38,],[6,16,20,21,22,23,25,6,6,6,]),'parameter_list':([26,31,],[30,34,]),'statement_list':([32,37,],[35,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',10),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',11),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',12),
  ('statement -> function_declaration','statement',1,'p_statement','parser.py',13),
  ('variable_declaration -> IDENTIFIER EQUAL expression SEMICOLON','variable_declaration',4,'p_variable_declaration','parser.py',18),
  ('function_declaration -> DEF IDENTIFIER LEFT_PAREN RIGHT_PAREN COLON statement_list','function_declaration',6,'p_function_declaration','parser.py',23),
  ('function_declaration -> DEF IDENTIFIER LEFT_PAREN parameter_list RIGHT_PAREN COLON statement_list','function_declaration',7,'p_function_declaration','parser.py',24),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',29),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',30),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',38),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parser.py',43),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',44),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',45),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',46),
  ('expression -> expression STAR expression','expression',3,'p_expression','parser.py',47),
  ('expression -> expression SLASH expression','expression',3,'p_expression','parser.py',48),
  ('parameter_list -> IDENTIFIER COMMA parameter_list','parameter_list',3,'p_parameter_list','parser.py',56),
  ('parameter_list -> IDENTIFIER','parameter_list',1,'p_parameter_list_single','parser.py',61),
  ('print_statement -> PRINT expression SEMICOLON','print_statement',3,'p_print_statement','parser.py',66),
]
